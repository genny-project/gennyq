package life.genny.gadaq.inference;

import javax.json.JsonObject;
import javax.json.bind.Jsonb;

import life.genny.qwandaq.message.QDataAnswerMessage;
import life.genny.qwandaq.utils.KafkaUtils;
import life.genny.qwandaq.models.UserToken;
import life.genny.qwandaq.utils.BaseEntityUtils;
import life.genny.qwandaq.utils.CacheUtils;
import life.genny.qwandaq.utils.QwandaUtils;
import life.genny.qwandaq.graphql.ProcessData;
import life.genny.qwandaq.Answer;
import life.genny.qwandaq.entity.BaseEntity;
import org.apache.commons.lang3.text.WordUtils;

ruleflow-group 'Inference'

rule InferenceLog 
when
	answer: Answer()
then
	String sourceCode = answer.getSourceCode();
	String targetCode = answer.getTargetCode();
	String attributeCode = answer.getAttributeCode();
	String value = answer.getValue();
	System.out.println("Inferring GENNYQ! Source Code: " + sourceCode + " Target Code: " + targetCode + " Attribute Code: " + attributeCode + " Value: " + value);
end

rule InferFirstName 
when
	answer: Answer( attributeCode == "PRI_FIRSTNAME" )
	beUtils : BaseEntityUtils()
	userToken : UserToken()
	qwandaUtils : QwandaUtils()
then
	System.out.println("InferFirstName fired!");
	String firstName = answer.getValue().toLowerCase().trim();
	firstName = WordUtils.capitalize(firstName);

	String processId = answer.getProcessId();
	ProcessData processData = qwandaUtils.fetchProcessData(processId); 
	BaseEntity processEntity = qwandaUtils.generateProcessEntity(processData);

	String lastName = processEntity.getValue("PRI_LASTNAME", null);
	if (lastName == null)
		return;

	lastName = WordUtils.capitalize(lastName);
	String name = firstName + " " + lastName;

	Answer a = new Answer(answer.getSourceCode(), answer.getTargetCode(), "PRI_NAME", name);
	a.setProcessId(answer.getProcessId());
	insert(a);
end

rule InferLastName 
when
	answer: Answer( attributeCode == "PRI_LASTNAME" )
	beUtils : BaseEntityUtils()
	userToken : UserToken()
	qwandaUtils : QwandaUtils()
then
	System.out.println("InferLastName fired!");
	String lastName = answer.getValue().toLowerCase().trim();
	lastName = WordUtils.capitalize(lastName);

	String processId = answer.getProcessId();
	ProcessData processData = qwandaUtils.fetchProcessData(processId); 
	BaseEntity processEntity = qwandaUtils.generateProcessEntity(processData);

	String firstName = processEntity.getValue("PRI_FIRSTNAME", null);
	if (firstName == null)
		return;

	firstName = WordUtils.capitalize(firstName);
	String name = firstName + " " + lastName;

	Answer a = new Answer(answer.getSourceCode(), answer.getTargetCode(), "PRI_NAME", name);
	a.setProcessId(answer.getProcessId());
	insert(a);
end

rule InferAddress 
when
	answer: Answer( attributeCode == "PRI_ADDRESS_FULL" )
	beUtils : BaseEntityUtils()
	userToken : UserToken()
	qwandaUtils : QwandaUtils()
	jsonb : Jsonb()
then
	System.out.println("InferAddress fired!");

	JsonObject json = null;
	try {
		json = jsonb.fromJson(answer.getValue(), JsonObject.class);
	} catch (Exception e) {
		return;
	}

	String country = json.getString("country");
	String suburb = json.getString("suburb");
	String state = json.getString("state");
	Double latitude = json.getJsonNumber("latitude").doubleValue();
	Double longitude = json.getJsonNumber("longitude").doubleValue();

	String processId = answer.getProcessId();
	Answer a = new Answer(answer.getSourceCode(), answer.getTargetCode(), "PRI_ADDRESS_COUNTRY", country);
	a.setProcessId(answer.getProcessId());
	insert(a);
	 
	Answer b = new Answer(answer.getSourceCode(), answer.getTargetCode(), "PRI_ADDRESS_SUBURB", suburb);
	b.setProcessId(answer.getProcessId());
	insert(b);

	Answer c = new Answer(answer.getSourceCode(), answer.getTargetCode(), "PRI_ADDRESS_STATE", state);
	c.setProcessId(answer.getProcessId());
	insert(c);

	Answer d = new Answer(answer.getSourceCode(), answer.getTargetCode(), "PRI_ADDRESS_LATITUDE", latitude);
	d.setProcessId(answer.getProcessId());
	insert(d);

	Answer e = new Answer(answer.getSourceCode(), answer.getTargetCode(), "PRI_ADDRESS_LONGITUDE", longitude);
	e.setProcessId(answer.getProcessId());
	insert(e);
end
